// Global variables
let chartInstance = null;
let chartData = null;

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    console.log('Dashboard initializing...');
    loadData();
    
    // Set up event listeners
    document.getElementById('refresh-btn').addEventListener('click', () => {
        loadData();
    });
});

// Load data from JSON file
async function loadData() {
    try {
        // In a real application, this would fetch from a Node.js API endpoint
        // For now, we'll load from the static JSON file generated by Python
        const response = await fetch('data/sample_data.json');
        
        if (!response.ok) {
            throw new Error('Failed to load data');
        }
        
        chartData = await response.json();
        console.log('Data loaded:', chartData);
        
        // Update the UI with the loaded data
        updateStatistics(chartData.statistics);
        updateChart(chartData);
        updateTable(chartData.statistics);
        
    } catch (error) {
        console.error('Error loading data:', error);
        
        // Fallback to sample data if file doesn't exist yet
        console.log('Using fallback sample data');
        useFallbackData();
    }
}

// Use fallback sample data (simulates Python pandas output)
function useFallbackData() {
    // This simulates data that would come from pandas
    const labels = [];
    const revenue = [];
    const expenses = [];
    const profit = [];
    
    // Generate 30 days of sample data
    const today = new Date();
    for (let i = 29; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        labels.push(date.toISOString().split('T')[0]);
        
        const rev = Math.floor(Math.random() * 20000) + 25000;
        const exp = Math.floor(Math.random() * 15000) + 15000;
        revenue.push(rev);
        expenses.push(exp);
        profit.push(rev - exp);
    }
    
    // Calculate statistics (mimicking pandas describe())
    const calculateStats = (arr) => ({
        mean: arr.reduce((a, b) => a + b, 0) / arr.length,
        median: arr.sort((a, b) => a - b)[Math.floor(arr.length / 2)],
        std: Math.sqrt(arr.reduce((sq, n) => sq + Math.pow(n - (arr.reduce((a, b) => a + b, 0) / arr.length), 2), 0) / arr.length),
        min: Math.min(...arr),
        max: Math.max(...arr)
    });
    
    chartData = {
        labels: labels,
        datasets: [
            {
                label: 'Revenue',
                data: revenue,
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.4
            },
            {
                label: 'Expenses',
                data: expenses,
                borderColor: 'rgb(255, 99, 132)',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                tension: 0.4
            },
            {
                label: 'Profit',
                data: profit,
                borderColor: 'rgb(54, 162, 235)',
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                tension: 0.4
            }
        ],
        statistics: {
            revenue: calculateStats(revenue),
            expenses: calculateStats(expenses),
            profit: calculateStats(profit)
        }
    };
    
    updateStatistics(chartData.statistics);
    updateChart(chartData);
    updateTable(chartData.statistics);
}

// Update statistics cards
function updateStatistics(stats) {
    document.getElementById('avg-revenue').textContent = 
        `$${stats.revenue.mean.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`;
    
    document.getElementById('avg-expenses').textContent = 
        `$${stats.expenses.mean.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`;
    
    document.getElementById('avg-profit').textContent = 
        `$${stats.profit.mean.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`;
    
    document.getElementById('data-points').textContent = 
        chartData.labels.length;
}

// Update the line chart
function updateChart(data) {
    const ctx = document.getElementById('lineChart').getContext('2d');
    
    // Destroy existing chart if it exists
    if (chartInstance) {
        chartInstance.destroy();
    }
    
    // Create new chart
    chartInstance = new Chart(ctx, {
        type: 'line',
        data: {
            labels: data.labels,
            datasets: data.datasets
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Financial Performance Over Time (Generated by Pandas & NumPy)'
                },
                tooltip: {
                    mode: 'index',
                    intersect: false,
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            label += '$' + context.parsed.y.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                            return label;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        minRotation: 45
                    }
                }
            },
            interaction: {
                mode: 'nearest',
                axis: 'x',
                intersect: false
            }
        }
    });
}

// Update statistics table
function updateTable(stats) {
    const tbody = document.getElementById('stats-body');
    tbody.innerHTML = '';
    
    const metrics = ['revenue', 'expenses', 'profit'];
    const metricLabels = {
        'revenue': 'Revenue',
        'expenses': 'Expenses',
        'profit': 'Profit'
    };
    
    metrics.forEach(metric => {
        const row = document.createElement('tr');
        const stat = stats[metric];
        
        row.innerHTML = `
            <td style="font-weight: 600;">${metricLabels[metric]}</td>
            <td>$${stat.mean.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</td>
            <td>$${stat.median.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</td>
            <td>$${stat.std.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</td>
            <td>$${stat.min.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</td>
            <td>$${stat.max.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',')}</td>
        `;
        
        tbody.appendChild(row);
    });
}

// Format currency
function formatCurrency(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(value);
}
